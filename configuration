#!/usr/bin/env bash

set -e

export LC_ALL=C
builduser=alex

COLOR_RED=$(tput setaf 1)
COLOR_GREY=$(tput setaf 8)
COLOR_YELLOW=$(tput setaf 3)
COLOR_BLUE=$(tput setaf 4)
COLOR_CYAN=$(tput setaf 6)
RESET=$(tput sgr0;tput init)
BOLD=$(tput bold)

prefix_yellow() {
    printf "$COLOR_YELLOW:: %s:$RESET " "$@"
}
prefix_red() {
    printf "$COLOR_RED:: %s:$RESET " "$@"
}
prefix_blue() {
    printf "$COLOR_BLUE:: %s:$RESET " "$@"
}
prefix_cyan() {
    printf "$COLOR_CYAN:: %s:$RESET " "$@"
}

do_install() {
    prefix_blue "install"
    printf "%s" "$1"

    if ! pacman -Q "$1" &> /dev/null; then
        pacman -S --needed --noconfirm -- "$1"
    else
        printf " $COLOR_GREY(%s)$RESET\n" 'already installed'
    fi
}

do_install_aur() {
    prefix_blue "install (AUR)"
    printf "%s" "$1"

    if ! pacman -Q "$1" &> /dev/null; then
        printf "\n"
        sudo -u $builduser -s -- <<EOF
            cd "$(mktemp -d)"
            curl "https://aur.archlinux.org/cgit/aur.git/snapshot/$1.tar.gz" | tar xz
            cd "$1"
            makepkg -sir --noconfirm --needed
EOF
    else
        printf " $COLOR_GREY(%s)$RESET\n" 'already installed'
    fi
}

do_install_aur_asdeps() {
    do_install_aur "$1"
    pacman -D --asdeps "$1" &> /dev/null
}

do_write() {
    mkdir -p -- "$(dirname "$1")"

    prefix_yellow "write"
    if [[ -e $1 ]]; then
        printf "%s $COLOR_GREY%s$RESET\n" "$1" "(already exists)"
    else
        printf "%s ← $COLOR_CYAN%s$RESET\n" "$1" "$2"
    fi

    printf "%s\n" "$2" > "$1"
}

do_user() {
    prefix_yellow "user"
    if id -u "$1" &> /dev/null; then
        printf "%s $COLOR_GREY%s$RESET\n" "$1" "(already exists)"
    else
        printf "%s\n" "$1"
        useradd -m -G wheel "$1"
        passwd "$1"
    fi
}

do_chsh() {
    prefix_yellow "shell"
    current_shell=$(getent passwd "$1" | cut -d: -f7)
    if [[ $current_shell == "$2" ]]; then
        printf "%s $COLOR_GREY%s$RESET\n" "$(basename "$2")" "(already set)"
    else
        printf "%s\n" "$(basename "$2")"
        chsh -s "$2" "$1"
    fi
}

# changes option '#AURSHOWDIFF=0'
#             to 'AURSHOWDIFF=1'
do_set_option() {
    file=$1
    key=$2
    value=$3
    delim=$4
    if [[ -n "$value" ]]; then
        [[ -z $delim ]] && delim="="
        new="$key$delim$value"
    else
        new=$key
    fi

    prefix_yellow "set"
    printf "$BOLD%s%s%s$RESET → %s\n" "$key" "$delim" "$value" "$file"

    current=$(grep -m 1 -n "$key" "$file" || true)
    if [[ -n "$current" ]]; then
        current_line=$(printf "%s" "$current" | cut -d: -f 1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        sed -i "${current_line}s|.*|$new|" "$file"
    else
        printf "%s\n" "$new" >> "$file"
    fi
}

do_set_option_ini() {
    prefix_yellow "set"
    printf "[%s] $BOLD%s=%s$RESET → %s\n" "$2" "$3" "$4" "$1"
    ./crudini.py --format=sh --set "$1" "$2" "$3" "$4"
}

do_enable_service() {
    prefix_blue "enable, start"
    printf "%s\n" "$1.service"
    systemctl start "$1" && systemctl enable "$1"
}

do_exec() {
    prefix_cyan "execute"
    printf "%s\n" "$*"
    "$@" > /dev/null
}

do_symlink() {
    prefix_yellow "symlink"
    printf "%s → %s" "$2" "$1"
    if [[ -e "$2" ]]; then
        printf " $COLOR_GREY%s$RESET\n" "(already exists)"
    else
        ln -rs "$1" "$2"
    fi
}
